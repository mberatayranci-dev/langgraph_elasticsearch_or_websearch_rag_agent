"""
LangGraph RAG Sistemi - Ana Ã‡alÄ±ÅŸtÄ±rma DosyasÄ±
Elasticsearch dÃ¶kÃ¼manlarÄ± Ã¼zerinde RAG + Web Search
"""
import os
from langchain_core.messages import HumanMessage

from src.config import OPENAI_API_KEY
from src.vectorstore import VectorStoreManager
from src.graph import create_graph


def setup_environment():
    """Ortam deÄŸiÅŸkenlerini ayarlar"""
    os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY


def print_banner():
    """BaÅŸlangÄ±Ã§ banner'Ä±nÄ± yazdÄ±rÄ±r"""
    print("=" * 80)
    print("LangGraph RAG Sistemi - Elasticsearch AsistanÄ±")
    print("=" * 80)
    print()


def print_instructions():
    """KullanÄ±m talimatlarÄ±nÄ± yazdÄ±rÄ±r"""
    print(" Sistem hazÄ±r!")
    print("\n KullanÄ±m:")
    print("   - Elasticsearch hakkÄ±nda sorular sorun (dÃ¶kÃ¼manlardan cevap alÄ±r)")
    print("   - BaÅŸka konular hakkÄ±nda sorular sorun (web'de arama yapar)")
    print("   - Ã‡Ä±kmak iÃ§in 'quit'veya 'Ã§Ä±k'yazÄ±n ")
    print("=" * 80 + "\n")


def main():
    """
    Ana fonksiyon - UygulamayÄ± baÅŸlatÄ±r
    """
    # OrtamÄ± hazÄ±rla
    setup_environment()
    
    # Banner'Ä± gÃ¶ster
    print_banner()
    
    # VectorStore'u kur
    print("ğŸ“š Chroma vektÃ¶r veritabanÄ± hazÄ±rlanÄ±yor...")
    vectorstore_manager = VectorStoreManager()
    vectorstore_manager.setup(reset_db=False)
    print()
    
    # Graph'Ä± oluÅŸtur
    graph = create_graph(vectorstore_manager)
    
    # TalimatlarÄ± gÃ¶ster
    print_instructions()
    
    # Ana dÃ¶ngÃ¼
    while True:
        try:
            # KullanÄ±cÄ± giriÅŸi al
            user_input = input("Siz: ").strip()
            
            # BoÅŸ giriÅŸleri atla
            if not user_input:
                continue
            
            # Ã‡Ä±kÄ±ÅŸ kontrolÃ¼
            if user_input.lower() in ['quit', 'exit', 'Ã§Ä±k', 'q']:
                print("\nGÃ¶rÃ¼ÅŸmek Ã¼zere!")
                break
            
            # State baÅŸlat
            initial_state = {
                "messages": [HumanMessage(content=user_input)],
                "is_elasticsearch_related": False,
                "context": ""
            }
            
            # Graph'Ä± Ã§alÄ±ÅŸtÄ±r
            result = graph.invoke(initial_state)
            
            # CevabÄ± yazdÄ±r
            assistant_message = result["messages"][-1].content
            print(f"\n Asistan: {assistant_message}\n")
            print("-" * 80 + "\n")
            
        except KeyboardInterrupt:
            print("\n\n Program sonlandÄ±rÄ±lÄ±yor...")
            break
            
        except Exception as e:
            print(f"\n Hata oluÅŸtu: {e}\n")
            continue


if __name__ == "__main__":
    main()